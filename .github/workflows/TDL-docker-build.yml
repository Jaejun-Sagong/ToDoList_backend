name: TDL-docker-build

on:
#  pull_request:
#    branches: [ main ]
  push:
    branches: [ dev ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Latest Repo
        uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: '8'
          distribution: 'adopt'

        ## gradle caching (캐시를 미리 생성해 빌드시 작업시간을 단축시켜 준다.)##
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## create application.properties
      - name: make application.properties
        if: contains(github.ref, 'dev') # branch dev일 때 application.properties파일 생성
        run: |
          # spring의 resources 경로로 이동(깃허브에 해당 경로에 파일이 있는지 확인)
           cd ./src/main/resources
          
           # application.properties 파일 생성
           touch ./application.properties
          
           # GitHub-Actions에서 설정한 값을 application.properties 파일에 덮어씌우기
           echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

      ## create application-aws.properties
      - name: make application-aws.properties
        if: contains(github.ref, 'dev') # 여러 branch설정은 불가능 한 듯?
        run: |
          # spring의 resources 경로로 이동
           cd ./src/main/resources
          
           # application-aws.properties 파일 생성
           touch ./application-aws.properties
          
           # GitHub-Actions에서 설정한 값을 application-aws.properties 파일에 쓰기
           echo "${{ secrets.AWS_PROPERTIES }}" > ./application-aws.properties
        shell: bash

      ## create application-oauth.properties
      - name: make application-oauth.properties
        if: contains(github.ref, 'dev') # branch가 main 일 때, 나머지는 위와 동일
        run: |
          cd ./src/main/resources
          touch ./application-oauth.properties
          echo "${{ secrets.OAUTH_PROPERTIES }}" > ./application-oauth.properties
        shell: bash

        ### Gradle ###
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      # docker username과 Token을 깃 허브에 저장해서 가져온다
      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker build -t tdl-docker-build .
          docker tag tdl-docker-build ${{ secrets.DOCKER_REPO }}/tdl-docker-build:latest
          docker push ${{ secrets.DOCKER_REPO }}/tdl-docker-build:latest

#      # Beanstalk 플러그인을 사용
#      # 미리 생성해둔 IAM 인증키를 사용
#      - name: Beanstalk Deploy
#        uses: einaregilsson/beanstalk-deploy@v20
#        with:
#          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          application_name: docker-elasticbeanstalk
#          environment_name: docker-elasticbeanstalk-env
#          version_label: "github-action--${{ steps.format-time.outputs.replaced }}"
#          region: ap-northeast-2
#          deployment_package: Dockerrun.aws.json